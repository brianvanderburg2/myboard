Framework
    Object in the framework are general purpose and reuseable.
    A config object exists that can be passed to each needed object.
    This config object can allow configuration of the application as well
    as framework specific configuration:

    framework.<config> - Configuration for the framework
    <app>.<config> - Configuration for the applications:

    This will allow configuration of various things:

    board data files:


        myboard.upload.dir
        myboard.upload.url (if set, then request of downloads will redirect to the URL
            instead of using the downloader.  If unset, the downloader will be used instead)
        myboard.userdata.dir
        myboard.userdata.url - If set, redirect.  Some resources will always use the downloader
        myboard.appdata.url - If set, redirect.  Some resources will always use the downloader

        Accessed as (userdata/appdata) /resources/... (uploads) /download/...
        The following content will always use the downloader, so that relative paths
        will be to /resources/ and won't get broken by a redirect to different locations:

            If a CSS file uses import("blah.css") and is accessed as /resources/css/test.css
            then it will get /resoruces/css/blah.css.  But if it is redirect to
            /appdata-url/css/test.css, it will try to load /appdata-url/css/blah.css, even if
            a user override /userdata-url/css/blah.css exists.  So keeping it being the /resources
            by using the downloader instead of redirecting allows userdata to override individual
            appdata files.

            Files to always download: css, js, xml, etc.
            Files can be redirected: images, uploads, etc


    Framework downloader

        framework.download.method
        framework.download.<method opts>

        xsendfile
        nginx (X-Accel-Redirect)
            prefixes =array(array("path prefix", "internal redirect prefix"), ...)
                    array("/path/to/publidata', "/public-internal"), etc
        direct  (uses readfile or something)

Framework config object is basically an array container with some utility methods
and can allow merging other data in.  Config gets passed to the board.  Board
merged config in with default config, and may override some items by merging it in
to the result:

    __construct($config):
        $this->config = $this->defaultConfig(); // set defaults
        $this->config->merge($config); // merge app config
        $this->config->merge($this->overrideConfig()); // override some values

This config object is passed to various objects in the framework and board.  If using
the injector, then this can be specified as follows:
    $injector->registor('downloader', 'mrbavii\\Framework\\Downloader', array($this->config));

    Request($config) // parses request from various php variables
    Response($config, $request) // Create a response for a request
    


Particular use cases

    Create the board object:
 
        $board = new MyBoard\Board($config)

    Run the board (entry.php or whatever)

        $board->execute()

    Show user information or login/logout (can put on any page if desired)

        $board->user->isLoggedIn()
        $board->user->login($username, $password)

    Show comments for a section of a page

        Solution 1:
            Use JSON/Ajax to pull comments in

        Solution 2:
            Just link to a specific topic on the board created for
            comments.

    Use templates from the board (note all templates will
        get certain initial varialbes, mainly $board, and always $template)

        $myboard->template->get('name', $params)

    Use captcha from board

        Redirect to:

            entry.php/captcha/prompt/<keyname>/return=

        Afterward:

            $key = $myboard->captcha->new()
            $myboard->captcha->embed($key)

                (for image captchas, this will create an image element that links back to
                entry.php/captcha/<key>[/params] which will call $myboard->captcha->display($key, $params)

            $myboard->captcha->verify($key, $userentry)


Pages
    index /index
    portal /portal
    view forums /forum[/<fid>[/<seo>]
    view topic /topic/<tid>[/<seo>]
    new topic /newtopic/<fid>
    new post /newpost/<tid>
    edit post (mod action only) /editpost/<pid>
    login /login
    logout /logout (show a logout page)
    logout /logout/<key> (direct logout without token)
    userpage /userpage/<uid|username>[/<page>]

    GET parameters will control some items:  For instance:

    /userpage/admin?action=edit
    /userpage/admin/page2?action=edit
    /userpage/admin?action=new
    /userpage/admin/page2?action=delete


Configuration
    The configuration is what is passed in initially to the board application.
    This is used to get the application up and running.

    userdata.dir - REQUIRED - The path to the user data directory, that is the
        data that is created or customized by the end user)
    userdata.method - REQUIRED -  The method to use to send files from the user
        data directory.  If not specified, url is assumed.
        url (use a public URL prefix)
        direct (directly send the file from the PHP code (slow, should not use)
        apache-xsendfile
        apache-xsendfile2
        lighttd-xsendfile
        nginx-xaccelredirect (url is used as the prefix)
    userdata.url
        method=url, the URL prefix for user data, written directly to HTML
        method=others (url is written as entry.php/data/(public/user/...)
        method=nginx-xaccelredirect, the prefix to use for nginx x-accel-redirect
    # appdata.dir - Does not exist, inferred by the application
    appdata.method - Same as userdata.method, except for the application data
    appdata.url - Same as userdata.url, except for the application data
    admin.key - HASH of admin master key, or an array of hashes.  This is used to "login"
        to the board for administrative purposes.  Such a user can't create posts (since this
        key doesn't mean the user has a corresponding user id) directly from this key.  It is
        possible to log in as a user as well as a master admin.
    database.host (host of database)
    database.port (port of database)
    database.socket (socket of database, do not use with host/port)
    database.name (name of database to use)
    database.user (username to use when connecting)
    database.pass (password to use when connecting)
    database.prefix (prefix used for all tables)
    
Features
    User Page
        A user page is a lot like a post in that a user can use any bbcode
        to create a page for their profile.
    Profile Comments
        Comments for a user's profile
    Private Messages
    BBCode
    Find/Replace BBCODE
    Image providers [image src="..." provider="..."]...[/img]
    Audio providers [audio]
    Video providers [video]
    Attachments

Database
    Database object derives from PDO.  Maybe change it to contain a PDO object instead
    Target MySQL/MariaDB
    execfile
        Execute an external sql file
        Need to read file in, replace table prefix, and exec line
        Each line is a command unless
            Starts with a # (ignored)
            Starts with whitespace (continuation of previous line)

Tables
    settings
        name
        value
    users
        --- basic stuff
        id (INTEGER PRIMARY KEY NOT NULL, 64 bit preferred)
        username (unique name of the user)
        password (hash of the user password: "sha1:...")
        email (normally an email address, but to allow different contact methods, encoded: "email:..."
        banned (if set, the user is banned until the date specified by this, or permanently if <0)
        activation (if set, the user is not active yet and must activate)
        group (primary user group)
        posts (incremented each time user makes a post, including starting a topic), fix counts
        topics (incremented each time the user starts a topic) fix counts
        joined
        last visited
        --- profile stuff
        realname
        userpage
        website
        occupation
        interests
        birthday
        signature
        --- settings
        public email
        admin contact
        allow private messages
        hide online status
        language
        theme
        timezone
        date format
        ---
        display images
        display flash
        display smilies
        display signatures
        display avatars
        ---
        show N recent topics
        order topics by
        order direction
        ---
        show N recent posts
        order by
        direction
    groups
        id
        name
        public
        permissions
    members
        id (really? maybe not)
        groupid
        memberid
    forums
        id
        parent
        inherit (inherit permissions and mods)
        name
        type (forum, category)
    topics
        id
        forum
        userid
        name
        time
    posts
        id
        topic
        userid
        time
        contents
    mods
        id (maybe not)
        forumid
        userid
    permissions
        id (maybe not)
        forumid
        groupid
        perms
    notices
        id
        content
        type
        forum
    joins (request to join a public group)
    leaders
        id
        groupid
        leaderid
    pms
    templates
    friends
        id
        userid
        friendid
    enemies
        id
        userid
        enemyid
    tracking
        id
        userid
        time
        address
    subscriptions
    bookmarks
    drafts
    pmdrafts
    attachments



